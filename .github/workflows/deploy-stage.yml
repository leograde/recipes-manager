name: Deploy to Stage
on:
  release:
    types: [published]

jobs:
  stage_deploy:
    name: Deploy to Stage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '14.x'

      - name: Start deployment
        uses: bobheadxi/deployments@v0.4.3
        id: deployment
        with:
          step: start
          token: ${{ secrets.GH_TOKEN }}
          env: stage

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Cache node_modules
        uses: actions/cache@v2
        id: cache
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            - ${{ runner.os }}-node_modules-

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn --frozen-lockfile
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Lint
        run: yarn lint

      - name: Unit tests
        run: yarn test

      - name: E2E tests
        run: yarn test:e2e

      - name: Build
        run: yarn build

      - name: Deploy
        run: yarn cdk deploy -c environment=stage --require-approval never --verbose
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          RELEASE_VERSION: ${{ github.event.release.tag_name }}

      - name: Get deployed Url
        run: |
          echo "DEPLOYED_URL=$(aws cloudformation describe-stacks --stack-name marketplace-backend-stage --query "Stacks[0].Outputs[?OutputKey=='url'].OutputValue" --output text)" >> $GITHUB_ENV

      - name: update deployment status
        uses: bobheadxi/deployments@v0.4.3
        if: always()
        with:
          step: finish
          token: ${{ secrets.GH_TOKEN }}
          status: ${{ job.status }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          env_url: ${{ env.DEPLOYED_URL }}
